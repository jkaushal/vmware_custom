<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="ecc_agent_script_include">
    <ecc_agent_script_include action="INSERT_OR_UPDATE">
        <active>true</active>
        <description/>
        <name>VMWareApiInvoker</name>
        <script><![CDATA[var VMWareApiInvoker = Class.create();
VMWareApiInvoker.prototype = Object.extendsObject(VMWareCloudAPIBase, {

	/**
 	* Parameters and headers are expected to come from the exchange from the blueprint
 	* orchestrator on the instance side.
 	*/
	initialize: function(parameters, headers) {
		this.parameters = parameters;
		this.headers = headers;
	},

	selectDatastore: function(){
		var clusterName = parameters.get("ClusterName");
		var location = parameters.get("Location");
		var serviceInstance = this.getServiceInstance();
		var datacenter =   new Packages.com.vmware.vim25.mo.InventoryNavigator(serviceInstance.getRootFolder()).searchManagedEntity("Datacenter", location);
		var clusterComputeResources = new Packages.com.vmware.vim25.mo.InventoryNavigator(datacenter).searchManagedEntities("ClusterComputeResource");
		for (var clusterComputeResourceInd in clusterComputeResources) {
			var cluster = clusterComputeResources[clusterComputeResourceInd];
			if (cluster.getName() == clusterName){
				var datastores =  cluster.getPropertyByPath("datastore");
				for (var datastoreMorInd in datastores) {

					var ds = Packages.com.vmware.vim25.mo.util.MorUtil.createExactManagedObject(serviceInstance.getServerConnection(), datastores[datastoreMorInd]);
					ms.log('Freee Space'+ds.getSummary().getFreeSpace());

				}
			}
		}
	},


	createVolume: function (){
		var validDiskTypes = {
			eagerZeroedThick: true,
			preallocated: true,
			raw: true,
			rdm: true,
			rdmp: true,
			sparse2Gb: true,
			thick: true,
			thick2Gb: true,
			thin: true
		};
		var serviceInstance = this.getServiceInstance();
		var fileManager = serviceInstance.getFileManager();
		var location = parameters.get('Location');
		var virtualDiskManager = serviceInstance.getVirtualDiskManager();
		var inventoryNavigator = new Packages.com.vmware.vim25.mo.InventoryNavigator(serviceInstance.getRootFolder());
		var datacenter = VMUtils.validateReference(inventoryNavigator.searchManagedEntity("Datacenter",location), "Could not find datacenter : ");
		var volumeName = parameters.get('VolumeName');
		var size = parameters.get('Size');
		var additionalParametersJSON = parameters.get('AdditionalParameters') + '';

		var additionalParametersObj= {};

		if (additionalParametersJSON != ""){
			additionalParametersObj = JSON.parse(additionalParametersJSON);
		}

		var storageServer = additionalParametersObj.DataStoreName;
		var thin = additionalParametersObj.Thin;
		var diskType = additionalParametersObj.diskType;
		var customDirPath = additionalParametersObj.customPath;

		var basePath = "[" + storageServer + "]";
		var dirPath = basePath;
		if (customDirPath) {
			dirPath = dirPath + customDirPath;
		}
		else {
			dirPath = basePath + " disks";
		}
		//var diskName = "[" + storageServer + "] disks/" + volumeName + ".vmdk";
		var diskName = dirPath + "/" + volumeName + ".vmdk";

		fileManager.makeDirectory(dirPath,datacenter,true);

		var virtualDiskSpec = new Packages.com.vmware.vim25.FileBackedVirtualDiskSpec();
		virtualDiskSpec.setAdapterType('lsiLogic');

		if(thin) virtualDiskSpec.setDiskType("thin");

		if(diskType && validDiskTypes[diskType]) virtualDiskSpec.setDiskType(diskType);

		virtualDiskSpec.setCapacityKb(1024 * 1024 * size);

		var diskTask;

		try{
			diskTask = virtualDiskManager.createVirtualDisk_Task(diskName, datacenter, virtualDiskSpec);
		}
		catch(err){
			throw new GenericException('Could not create volume: ' + err);
		}

		var taskStatus = diskTask.waitForTask() + '';

		var success = 'success';


		if (taskStatus != null && taskStatus.toUpperCase() != success.toUpperCase()){
			throw new GenericException('Task error creating disk: ' + diskName + ' || ' + volumeName + ' || ' + taskStatus);
		}

		var volume = {
			volumeName: volumeName,
			volumeId: diskName,
			size: size+'',
			state:'available',
			volumeType:'block',
			storageServer: storageServer+''
		};

		return volume;
	},

	type: 'VMWareApiInvoker'
});]]></script>
        <sys_class_name>ecc_agent_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-07-15 07:25:41</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>1789211777a23300c14554389a1061da</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>VMWareApiInvoker</sys_name>
        <sys_overrides/>
        <sys_package display_value="VMWare Custom" source="sn_vmware_custom">0e87a59377a23300c14554389a10613c</sys_package>
        <sys_policy/>
        <sys_scope display_value="VMWare Custom">0e87a59377a23300c14554389a10613c</sys_scope>
        <sys_update_name>ecc_agent_script_include_1789211777a23300c14554389a1061da</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-07-15 07:38:32</sys_updated_on>
    </ecc_agent_script_include>
</record_update>
